name: JavaScript Broadcast

on:
  push:
    branches: [ "main", "master" ]

jobs:
  broadcast:
    runs-on: self-hosted
    
    steps:
    - name: Broadcast to all subscribers
      uses: actions/github-script@v7
      with:
        script: |
          const botToken = '${{ secrets.TELEGRAM_BOT_TOKEN }}';
          
          console.log('Getting bot subscribers...');
          
          try {
            // Get all updates
            const updatesResponse = await fetch(`https://api.telegram.org/bot${botToken}/getUpdates`);
            const updatesData = await updatesResponse.json();
            
            console.log(`Found ${updatesData.result.length} total updates`);
            
            // Extract unique chat IDs
            const chatIds = [...new Set(
              updatesData.result
                .filter(update => update.message && update.message.chat.id)
                .map(update => update.message.chat.id)
            )];
            
            console.log(`Broadcasting to ${chatIds.length} unique users`);
            
            if (chatIds.length === 0) {
              console.log('No subscribers found. Users need to send /start to the bot first!');
              return;
            }
            
            // Prepare message
            const message = `GitHub Push Alert!
            
Repository: ${{ github.repository }}
Author: ${{ github.actor }}
Commit: ${{ github.sha }}
Time: ${new Date().toLocaleString()}

Status: SUCCESS`;
            
            // Send to each subscriber
            let successCount = 0;
            let errorCount = 0;
            
            for (const chatId of chatIds) {
              try {
                const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    chat_id: chatId,
                    text: message
                  })
                });
                
                const data = await response.json();
                
                if (data.ok) {
                  console.log(`Message sent to user ${chatId}`);
                  successCount++;
                } else {
                  console.log(`Failed to send to ${chatId}: ${data.description}`);
                  errorCount++;
                }
              } catch (error) {
                console.log(`Error sending to ${chatId}: ${error.message}`);
                errorCount++;
              }
              
              // Small delay to avoid rate limiting
              await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            console.log(`Broadcast completed! Success: ${successCount}, Errors: ${errorCount}`);
            
          } catch (error) {
            console.log(`Error: ${error.message}`);
            process.exit(1);
          }
